const net = require("net");

let clientId = 0;

const bufferList = [
  "232301fe4C46574144524A463031313030323334360100281206050B2C1D00013833363035333337393831363035343930313837020531303030313130303032C2",

  "232302FE45525230383033303030303030303030300100B71206170C05020101030100320000023D1B583A9832013E121D0065020101013C61A888B83C00783A980500072733A101CF049C060111064001020500010150010540070000000000000000000801011B583A9800110001110640050006400640064006400640064006400640064006400640064006400640064009010100055040404040800030CD0036277E32B038380500000000000000000000001766271A000000000000000000000000121D0000383C000000001674",
  "232303FE4C5758435332303137313130373030303001006B1206150D312F810100020003000004271001000200030000042710010002000300000427100100020003000004271001000200030000042710010002000300000427100100020003000004271001000200030000042710010002000300000427100100020003000004271054",
  "232307FE4838323230363530303030303030303030010000BB",
  "232308FE4552523038303330303030303030303030010000B9",


  "232301FE4C464E41344C4441394A4B4C303030383101001F120A1E10240000033839383631363136303230303134313030303032010131DF",
];

class FakeClient {
  /**
   * @param {String} mode - fixedLength or onebyone
   * @param {Object} options
   * @param {Number} [options.port = 9527]
   * @param {String} [options.host = 127.0.0.1]
   * @param {Number} [options.interval = 100]
   * @param {Number} [options.length = 1000]
   * @param {Boolean} [options.output = false]
   */
  constructor(mode = "fixedLength", options) {
    this.clientId = clientId;
    clientId += 1;
    this.client = new net.Socket();
    this.options = {
      port: 9527,
      host: "127.0.0.1",
      interval: 1000,
      length: 1000,
      output: false,
      ...options,
    };
    this.client.connect(
      this.options.port,
      this.options.host,
      () => {
        console.log(`#${this.clientId} Connected`);
      }
    );
    this.client.on("data", buf => {
      console.log(
        `#${this.clientId} get data...`,
        this.options.output ? buf.toString("hex") : buf.length
      );
    });
    this.client.on("close", () => {
      console.log(`#${this.clientId} Connection closed`);
    });

    this.timer = this[mode](this.options.interval, this.options.length);
  }

  close() {
    clearInterval(this.timer);
    this.client.end();
  }

  onebyone(interval) {
    let offset = 0;
    return setInterval(() => {
      const bufferString = bufferList[offset % bufferList.length];
      const buf = Buffer.from(bufferString, "hex");
      this.client.write(buf);
      offset += 1;
    }, interval);
  }

  fixedLength(interval, length = 1000) {
    const totalBuffer = Buffer.from(bufferList.join(""), "hex");
    const totalBufferLength = totalBuffer.byteLength;
    console.log("Total buffer length:", totalBufferLength);
    let offset = 0;
    return setInterval(() => {
      console.log("Run...");
      let current = Buffer.alloc(0);
      while (current.length !== length) {
        const rest = length - current.length;
        if (rest > totalBufferLength - offset) {
          current = Buffer.concat([current, totalBuffer.slice(offset, totalBufferLength)]);
          offset = 0;
        } else {
          current = Buffer.concat([current, totalBuffer.slice(offset, offset + rest)]);
          offset += rest;
        }
      }
      this.client.write(current);
    }, interval);
  }
}

const clients = [];

const CLIENT_COUNT = 100;
const INVERVAL = 200;
const MODE = "fixedLength";

for (let i = 0; i < CLIENT_COUNT; i++) {
  const c = new FakeClient(MODE, { interval: INVERVAL });
  clients.push(c);
}
